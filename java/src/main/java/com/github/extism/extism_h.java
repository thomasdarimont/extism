// Generated by jextract

package com.github.extism;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class extism_h  {

    /* package-private */ extism_h() {}
    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static int _STDINT_H() {
        return (int)1L;
    }
    public static int _FEATURES_H() {
        return (int)1L;
    }
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    public static int __USE_POSIX() {
        return (int)1L;
    }
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    public static int __WORDSIZE() {
        return (int)64L;
    }
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    public static int __USE_MISC() {
        return (int)1L;
    }
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    public static int __GLIBC__() {
        return (int)2L;
    }
    public static int __GLIBC_MINOR__() {
        return (int)35L;
    }
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return (int)0L;
    }
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    public static int __GLIBC_USE_LIB_EXT2() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return (int)0L;
    }
    public static int _BITS_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_TYPESIZES_H() {
        return (int)1L;
    }
    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int)1L;
    }
    public static int __INO_T_MATCHES_INO64_T() {
        return (int)1L;
    }
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int)1L;
    }
    public static int __STATFS_MATCHES_STATFS64() {
        return (int)1L;
    }
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return (int)1L;
    }
    public static int __FD_SETSIZE() {
        return (int)1024L;
    }
    public static int _BITS_TIME64_H() {
        return (int)1L;
    }
    public static int _BITS_WCHAR_H() {
        return (int)1L;
    }
    public static int _BITS_STDINT_INTN_H() {
        return (int)1L;
    }
    public static int _BITS_STDINT_UINTN_H() {
        return (int)1L;
    }
    public static int true_() {
        return (int)1L;
    }
    public static int false_() {
        return (int)0L;
    }
    public static int __bool_true_false_are_defined() {
        return (int)1L;
    }
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort __int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __key_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fsword_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __syscall_slong_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress __caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __sig_atomic_t = Constants$root.C_INT$LAYOUT;
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast16_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast32_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt ExtismPlugin = Constants$root.C_INT$LAYOUT;
    public static MethodHandle extism_context_new$MH() {
        return RuntimeHelper.requireNonNull(constants$0.extism_context_new$MH,"extism_context_new");
    }
    public static MemoryAddress extism_context_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.extism_context_new$MH, "extism_context_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle extism_context_free$MH() {
        return RuntimeHelper.requireNonNull(constants$0.extism_context_free$MH,"extism_context_free");
    }
    public static void extism_context_free ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.extism_context_free$MH, "extism_context_free");
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle extism_plugin_new$MH() {
        return RuntimeHelper.requireNonNull(constants$0.extism_plugin_new$MH,"extism_plugin_new");
    }
    public static int extism_plugin_new ( Addressable ctx,  Addressable wasm,  long wasm_size,  boolean with_wasi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.extism_plugin_new$MH, "extism_plugin_new");
        try {
            return (int)mh$.invokeExact(ctx, wasm, wasm_size, with_wasi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle extism_plugin_update$MH() {
        return RuntimeHelper.requireNonNull(constants$0.extism_plugin_update$MH,"extism_plugin_update");
    }
    public static boolean extism_plugin_update ( Addressable ctx,  int index,  Addressable wasm,  long wasm_size,  boolean with_wasi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.extism_plugin_update$MH, "extism_plugin_update");
        try {
            return (boolean)mh$.invokeExact(ctx, index, wasm, wasm_size, with_wasi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle extism_plugin_free$MH() {
        return RuntimeHelper.requireNonNull(constants$0.extism_plugin_free$MH,"extism_plugin_free");
    }
    public static void extism_plugin_free ( Addressable ctx,  int plugin) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.extism_plugin_free$MH, "extism_plugin_free");
        try {
            mh$.invokeExact(ctx, plugin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle extism_context_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$0.extism_context_reset$MH,"extism_context_reset");
    }
    public static void extism_context_reset ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.extism_context_reset$MH, "extism_context_reset");
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle extism_plugin_config$MH() {
        return RuntimeHelper.requireNonNull(constants$1.extism_plugin_config$MH,"extism_plugin_config");
    }
    public static boolean extism_plugin_config ( Addressable ctx,  int plugin,  Addressable json,  long json_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.extism_plugin_config$MH, "extism_plugin_config");
        try {
            return (boolean)mh$.invokeExact(ctx, plugin, json, json_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle extism_plugin_function_exists$MH() {
        return RuntimeHelper.requireNonNull(constants$1.extism_plugin_function_exists$MH,"extism_plugin_function_exists");
    }
    public static boolean extism_plugin_function_exists ( Addressable ctx,  int plugin,  Addressable func_name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.extism_plugin_function_exists$MH, "extism_plugin_function_exists");
        try {
            return (boolean)mh$.invokeExact(ctx, plugin, func_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle extism_plugin_call$MH() {
        return RuntimeHelper.requireNonNull(constants$1.extism_plugin_call$MH,"extism_plugin_call");
    }
    public static int extism_plugin_call ( Addressable ctx,  int plugin_id,  Addressable func_name,  Addressable data,  long data_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.extism_plugin_call$MH, "extism_plugin_call");
        try {
            return (int)mh$.invokeExact(ctx, plugin_id, func_name, data, data_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle extism_error$MH() {
        return RuntimeHelper.requireNonNull(constants$1.extism_error$MH,"extism_error");
    }
    public static MemoryAddress extism_error ( Addressable ctx,  int plugin) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.extism_error$MH, "extism_error");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx, plugin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle extism_plugin_output_length$MH() {
        return RuntimeHelper.requireNonNull(constants$1.extism_plugin_output_length$MH,"extism_plugin_output_length");
    }
    public static long extism_plugin_output_length ( Addressable ctx,  int plugin) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.extism_plugin_output_length$MH, "extism_plugin_output_length");
        try {
            return (long)mh$.invokeExact(ctx, plugin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle extism_plugin_output_data$MH() {
        return RuntimeHelper.requireNonNull(constants$1.extism_plugin_output_data$MH,"extism_plugin_output_data");
    }
    public static MemoryAddress extism_plugin_output_data ( Addressable ctx,  int plugin) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.extism_plugin_output_data$MH, "extism_plugin_output_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx, plugin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle extism_log_file$MH() {
        return RuntimeHelper.requireNonNull(constants$2.extism_log_file$MH,"extism_log_file");
    }
    public static boolean extism_log_file ( Addressable filename,  Addressable log_level) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.extism_log_file$MH, "extism_log_file");
        try {
            return (boolean)mh$.invokeExact(filename, log_level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle extism_version$MH() {
        return RuntimeHelper.requireNonNull(constants$2.extism_version$MH,"extism_version");
    }
    public static MemoryAddress extism_version () {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.extism_version$MH, "extism_version");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    public static int __TIMESIZE() {
        return (int)64L;
    }
    public static long __STDC_IEC_60559_BFP__() {
        return 201404L;
    }
    public static long __STDC_IEC_60559_COMPLEX__() {
        return 201404L;
    }
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    public static int __WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int __WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int INT8_MIN() {
        return (int)-128L;
    }
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT8_MAX() {
        return (int)127L;
    }
    public static int INT16_MAX() {
        return (int)32767L;
    }
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT8_MAX() {
        return (int)255L;
    }
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT64_MAX() {
        return -1L;
    }
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    public static long INT_FAST16_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST32_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    public static long INT_FAST16_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST32_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    public static long UINT_FAST16_MAX() {
        return -1L;
    }
    public static long UINT_FAST32_MAX() {
        return -1L;
    }
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTPTR_MAX() {
        return -1L;
    }
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTMAX_MAX() {
        return -1L;
    }
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    public static long SIZE_MAX() {
        return -1L;
    }
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int WINT_MIN() {
        return (int)0L;
    }
    public static int WINT_MAX() {
        return (int)4294967295L;
    }
}


